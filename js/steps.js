// Generated by CoffeeScript 1.3.3

/*
  This is the main script file. It can attach to the terminal
*/


/*
  Register the things
*/


(function() {
  var buildfunction, current_question, f, leaveFullSizeMode, next, previous, q, question, questions, results, _i, _len;

  this.webterm = $('#terminal').terminal(interpreter, basesettings);

  $('#buttonNext').click(function() {
    next();
    return $('#results').hide();
  });

  $('#buttonPrevious').click(function() {
    previous();
    return $('#results').hide();
  });

  /*
    Start with the questions
  */


  questions = [];

  current_question = 0;

  next = function() {
    current_question++;
    questions[current_question]();
    return results.clear();
  };

  previous = function() {
    current_question--;
    questions[current_question]();
    return results.clear();
  };

  results = {
    set: function(htmlText) {
      return $('#results').html(htmlText);
    },
    clear: function() {
      return $('#results').html("");
    }
  };

  /*
    Array of question objects
  */


  q = [];

  q.push({
    html: "<h1>Welcome</h1>\n\nPlease type docker search ubuntu\n",
    command_expected: ['docker'],
    result: "yeey! hurray, woohooo, you did it, amazing, you are awesome, you completed the first assignment.",
    tip: "try typing `docker version"
  });

  q.push({
    html: "<h1>Check if Docker is running</h1>\n\n`docker version` will show the versions docker is running. If either are not present this will show a warning\n\n<h4>background:</h4>\nThere are actually two programs, a Docker daemon, it actually manages al lthe containers, and the Docker client. It acts as a remote control. On most systems, like ours, both run on the same host.",
    command_expected: ['docker', 'version'],
    result: "Well done.",
    tip: "try typing `docker version"
  });

  /*
    Transform question objects into functions
  */


  buildfunction = function(q) {
    var _q;
    _q = q;
    return function() {
      console.debug("function called");
      $('#instructions .text').html(_q.html);
      window.immediateCallback = function(input) {
        console.log(input);
        if (Object.equal(input, _q.command_expected)) {
          $('#results').show();
          $('#results .text').html(_q.result);
          $('#buttonNext').removeAttr('disabled');
        } else {
          $('#results.text').html(_q.partial_results);
        }
      };
    };
  };

  for (_i = 0, _len = q.length; _i < _len; _i++) {
    question = q[_i];
    f = buildfunction(question);
    questions.push(f);
  }

  questions[0]();

  /*
    Make the resizing possible
  */


  $('#fullSizeOpen').click(function() {
    console.debug("going to fullsize mode");
    $('#overlay').addClass('fullsize');
    $('#main').addClass('fullsize');
    $('#tutorialTop').addClass('fullsize');
    return webterm.resize();
  });

  $('#fullSizeClose').click(function() {
    return leaveFullSizeMode();
  });

  leaveFullSizeMode = function() {
    console.debug("leaving full-size mode");
    $('#overlay').removeClass('fullsize');
    $('#main').removeClass('fullsize');
    $('#tutorialTop').removeClass('fullsize');
    return webterm.resize();
  };

}).call(this);
