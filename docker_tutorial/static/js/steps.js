// Generated by CoffeeScript 1.6.2
/*
  This is the main script file. It can attach to the terminal
*/


(function() {
  var EVENT_TYPES, app, buildfunction, csrfSafeMethod, current_question, currentquestion, drawStatusMarker, err, f, getCookie, logEvent, next, previous, progressIndicator, q, question, questionNumber, questions, results, statusMarker, _i, _len;

  app = Application.get();

  /*
    Array of question objects
  */


  q = app.questions;

  questions = [];

  /*
    Register the terminal
  */


  this.webterm = $('#terminal').terminal(interpreter, basesettings);

  EVENT_TYPES = {
    none: "none",
    start: "start",
    command: "command",
    next: "next",
    peek: "peek",
    feedback: "feedback",
    complete: "complete"
  };

  /*
    Sending events to the server
  */


  logEvent = function(data, feedback) {
    var ajax_load, callback, loadUrl;

    if (typeof LOG_EVENTS !== "undefined" && LOG_EVENTS !== null) {
      ajax_load = "loading......";
      loadUrl = "/tutorial/api/";
      if (!feedback) {
        callback = function(responseText) {
          return $("#ajax").html(responseText);
        };
      } else {
        callback = function(responseText) {
          results.set("Thank you for your feedback! We appreciate it!", true);
          $('#feedbackInput').val("");
          return $("#ajax").html(responseText);
        };
      }
      if (!data) {
        data = {
          type: EVENT_TYPES.none
        };
      }
      data.question = current_question;
      $("#ajax").html(ajax_load);
      return $.post(loadUrl, data, callback, "html");
    }
  };

  /*
    Event handlers
  */


  $('#buttonNext').click(function(e) {
    this.setAttribute('disabled', 'disabled');
    console.log(e);
    return next();
  });

  $('#buttonFinish').click(function() {
    return window.open(app.COMPLETE_URL);
  });

  $('#buttonPrevious').click(function() {
    previous();
    return $('#results').hide();
  });

  $('#leftside').bind('mousewheel', function(event, delta, deltaX, deltaY) {
    this.scrollTop += deltaY * -30;
    return event.preventDefault();
  });

  $('#feedbackSubmit').click(function() {
    var data, feedback;

    feedback = $('#feedbackInput').val();
    data = {
      type: EVENT_TYPES.feedback,
      feedback: feedback
    };
    return logEvent(data, feedback = true);
  });

  $('#fullSizeOpen').click(function() {
    return goFullScreen();
  });

  this.goFullScreen = function() {
    console.debug("going to fullsize mode");
    $('.togglesize').removeClass('startsize').addClass('fullsize');
    $('.hide-when-small').css({
      display: 'inherit'
    });
    $('.hide-when-full').css({
      display: 'none'
    });
    next(0);
    webterm.resize();
    return setTimeout(function() {
      return logEvent({
        type: EVENT_TYPES.start
      });
    }, 3000);
  };

  $('#fullSizeClose').click(function() {
    return leaveFullSizeMode();
  });

  this.leaveFullSizeMode = function() {
    console.debug("leaving full-size mode");
    $('.togglesize').removeClass('fullsize').addClass('startsize');
    $('.hide-when-small').css({
      display: 'none'
    });
    $('.hide-when-full').css({
      display: 'inherit'
    });
    return webterm.resize();
  };

  $('#command').click(function() {
    var data;

    if (!$('#commandHiddenText').hasClass('hidden')) {
      $('#commandHiddenText').addClass("hidden").hide();
      $('#commandShownText').hide().removeClass("hidden").fadeIn();
    }
    data = {
      type: EVENT_TYPES.peek
    };
    return logEvent(data);
  });

  /*
    Navigation amongst the questions
  */


  current_question = 0;

  next = function(which) {
    var data;

    $('#marker-' + current_question).addClass("complete").removeClass("active");
    if (!which && which !== 0) {
      current_question++;
    } else {
      current_question = which;
    }
    questions[current_question]();
    results.clear();
    this.webterm.focus();
    if (!$('#commandShownText').hasClass('hidden')) {
      $('#commandShownText').addClass("hidden");
      $('#commandHiddenText').removeClass("hidden").show();
    }
    history.pushState({}, "", "#" + current_question);
    data = {
      'type': EVENT_TYPES.next
    };
    logEvent(data);
    $('#marker-' + current_question).removeClass("complete").addClass("active");
    $('#question-number').find('text').get(0).textContent = current_question;
    $('#instructions .assignment').show();
    $('#tips, #command').show();
  };

  previous = function() {
    current_question--;
    questions[current_question]();
    results.clear();
    this.webterm.focus();
  };

  results = {
    set: function(htmlText, intermediate) {
      if (intermediate) {
        console.debug("intermediate text received");
        $('#results').addClass('intermediate');
        $('#buttonNext').hide();
      } else {
        $('#buttonNext').show();
      }
      setTimeout((function() {
        this.webterm.disable();
        return $('#buttonNext').focus();
      }), 1000);
      return window.setTimeout((function() {
        $('#resulttext').html(htmlText);
        $('#results').fadeIn();
        return $('#buttonNext').removeAttr('disabled');
      }), 300);
    },
    clear: function() {
      $('#resulttext').html("");
      return $('#results').fadeOut('slow');
    }
  };

  /*
    Transform question objects into functions
  */


  buildfunction = function(q) {
    var _q;

    _q = q;
    return function() {
      console.debug("function called");
      $('#instructions').hide().fadeIn();
      $('#instructions .text').html(_q.html);
      $('#instructions .assignment').html(_q.assignment);
      $('#tipShownText').html(_q.tip);
      if (_q.command_show) {
        $('#commandShownText').html(_q.command_show.join(' '));
      } else {
        $('#commandShownText').html(_q.command_expected.join(' '));
      }
      if (_q.finishedCallback != null) {
        window.finishedCallback = q.finishedCallback;
      } else {
        window.finishedCallback = function() {
          return "";
        };
      }
      window.intermediateResults = function(input) {
        var intermediate;

        if (_q.intermediateresults) {
          return results.set(_q.intermediateresults[input](), intermediate = true);
        }
      };
      window.questionAnswered = function(input) {
        return results.set(_q.result);
      };
    };
  };

  statusMarker = $('#progress-marker-0');

  progressIndicator = $('#progress-indicator');

  drawStatusMarker = function(i) {
    var marker;

    if (i === 0) {
      marker = statusMarker;
    } else {
      marker = statusMarker.clone();
      marker.appendTo(progressIndicator);
    }
    marker.attr("id", "marker-" + i);
    marker.find('text').get(0).textContent = i;
    return marker.click(function() {
      return next(i);
    });
  };

  questionNumber = 0;

  for (_i = 0, _len = q.length; _i < _len; _i++) {
    question = q[_i];
    f = buildfunction(question);
    questions.push(f);
    drawStatusMarker(questionNumber);
    questionNumber++;
  }

  /*
    Initialization of program
  */


  if (window.location.hash) {
    try {
      currentquestion = window.location.hash.split('#')[1].toNumber();
      next(currentquestion);
    } catch (_error) {
      err = _error;
      questions[0]();
    }
  } else {
    questions[0]();
  }

  $('#results').hide();

  /*
    Pull CSRF token from cookie and set it in the request header.
  */


  getCookie = function(name) {
    var cookie, cookieValue, cookies, _j, _len1;

    cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      cookies = document.cookie.split('; ');
      for (_j = 0, _len1 = cookies.length; _j < _len1; _j++) {
        cookie = cookies[_j];
        $.trim(cookie);
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        }
      }
    }
    return cookieValue;
  };

  csrfSafeMethod = function(method) {
    var regex;

    regex = /^(GET|HEAD|OPTIONS|TRACE)$/;
    return regex.test(method);
  };

  $.ajaxSetup({
    crossDomain: false,
    beforeSend: function(xhr, settings) {
      if (!csrfSafeMethod(settings.type)) {
        return xhr.setRequestHeader("X-CSRFToken", getCookie("csrftoken"));
      }
    }
  });

}).call(this);
